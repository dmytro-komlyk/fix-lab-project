version: "3.8"
services:
  mongo:
    build:
      target: mongo
      dockerfile: ./apps/database/Dockerfile
      args:
        MONGO_VERSION: 6
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=
      - MONGO_INITDB_ROOT_PASSWORD=
      - MONGO_INITDB_DATABASE=
      - MONGO_REPLICA_HOST=
      - MONGO_REPLICA_PORT=27018
      - MONGO_COMMAND=mongosh
      - INIT_REPL_CMD=3
    volumes:
      - ./apps/database/data:/data/db
      - ./apps/database/conf/mongod.conf.orig:/etc/mongod.conf
    ports:
      - 27018:27018
    networks:
      - backend
    restart: always
    healthcheck:
      # Use "mongo" instead of "mongosh" before v5.0
      test:
        [
          "CMD",
          "mongosh",
          "admin",
          "--port",
          "27018",
          "--eval",
          "db.adminCommand('ping').ok",
        ]
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  app:
    image: "jc21/nginx-proxy-manager:latest"
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - ./nginx/data:/data
      - ./nginx/letsencrypt:/etc/letsencrypt
    networks:
      - backend

  server:
    build:
      context: .
      target: runner
      dockerfile: ./apps/server/Dockerfile
    container_name: server
    restart: unless-stopped
    env_file: ./apps/server/.env.docker
    environment:
      - NODE_ENV=production
      - DATABASE_USERNAME=
      - DATABASE_PASSWORD=
      - DATABASE_NAME=
      - DATABASE_URL=
      - JWT_SECRET_KEY=
      - JWT_REFRESH_TOKEN_KEY=
    volumes:
      - ./apps/server/public:/app/apps/server/public
      - ./nginx/data:/app/nginx/data
      - /app/node_modules
      - /app/apps/server/node_modules

    ports:
      - 30000:3000
    networks:
      - client
      - backend
    depends_on:
      - mongo
    links:
      - mongo

  admin:
    build:
      context: .
      target: runner
      dockerfile: ./apps/admin/Dockerfile
      args:
        DATABASE_URL: #Add URL
    container_name: admin
    restart: unless-stopped
    stdin_open: true
    tty: true
    env_file: ./apps/admin/.env.docker.local
    environment:
      - NODE_ENV=production
    volumes:
      - ./apps/admin/public:/app/apps/admin/public
      - /app/node_modules
      - /app/apps/admin/node_modules
    ports:
      - "30002:3002"
    networks:
      - client
      - backend

  client:
    build:
      context: .
      target: runner
      dockerfile: ./apps/client/Dockerfile
      args:
        DATABASE_URL: #Add URL
    container_name: client
    restart: unless-stopped
    stdin_open: true
    tty: true
    env_file: ./apps/client/.env.docker.local
    environment:
      - NODE_ENV=production
    volumes:
      - ./apps/client/public:/app/apps/client/public
      - /app/node_modules
      - /app/apps/client/node_modules
    ports:
      - "30001:3001"
    networks:
      - client
      - backend

networks:
  client:
    driver: bridge
  backend:
    driver: bridge

volumes:
  database:
    driver: local
